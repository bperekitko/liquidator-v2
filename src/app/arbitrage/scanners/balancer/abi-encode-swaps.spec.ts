import { Swap } from '@balancer-labs/sor/dist/types';
import { expect } from 'chai';
import { abiEncodeSwaps } from './abi-encode-swaps';

const swapOne: Swap = {
	pool: '0x7afe74ae3c19f070c109a38c286684256adc656c',
	tokenIn: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
	tokenOut: '0x6b175474e89094c44da98b954eedeac495271d0f',
	swapAmount: '14688697926788786427',
	limitReturnAmount: '0',
	maxPrice: '115792089237316195423570985008687907853269984665640564039457584007913129639935',
};

const swapTwo: Swap = {
	pool: '0x8b6e6e7b5b3801fed2cafd4b22b8a16c2f2db21a',
	tokenIn: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
	tokenOut: '0x6b175474e89094c44da98b954eedeac495271d0f',
	swapAmount: '10311302073211213573',
	limitReturnAmount: '0',
	maxPrice: '115792089237316195423570985008687907853269984665640564039457584007913129639935',
};

describe('Abi encode swaps', function () {
	it('should encode correctly one nested swaps', function () {
		const expected =
			'0x' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000007afe74ae3c19f070c109a38c286684256adc656c' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'000000000000000000000000000000000000000000000000cbd8bcf0bb4328fb' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';

		const oneNestedSwap = [[swapOne]];

		const result = abiEncodeSwaps(oneNestedSwap);

		expect(result).eq(expected);
	});

	it('should encode correctly two nested swaps', function () {
		const expected =
			'0x' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000002' +
			'0000000000000000000000007afe74ae3c19f070c109a38c286684256adc656c' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'000000000000000000000000000000000000000000000000cbd8bcf0bb4328fb' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +
			'0000000000000000000000008b6e6e7b5b3801fed2cafd4b22b8a16c2f2db21a' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'0000000000000000000000000000000000000000000000008f191a9a9d80d705' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';

		const twoNestedSwaps = [[swapOne, swapTwo]];

		const result = abiEncodeSwaps(twoNestedSwaps);

		expect(result).eq(expected);
	});

	it('should encode correctly two separated nested swaps', function () {
		const expected =
			'0x' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000002' +
			'0000000000000000000000000000000000000000000000000000000000000040' +
			'0000000000000000000000000000000000000000000000000000000000000120' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000007afe74ae3c19f070c109a38c286684256adc656c' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'000000000000000000000000000000000000000000000000cbd8bcf0bb4328fb' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000008b6e6e7b5b3801fed2cafd4b22b8a16c2f2db21a' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'0000000000000000000000000000000000000000000000008f191a9a9d80d705' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';

		const twoNestedSwaps = [[swapOne], [swapTwo]];

		const result = abiEncodeSwaps(twoNestedSwaps);

		expect(result).eq(expected);
	});

	it('should encode correctly one swap with missing props', function () {
		const expected =
			'0x' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000000000000000000000000000000000000000000020' +
			'0000000000000000000000000000000000000000000000000000000000000001' +
			'0000000000000000000000007afe74ae3c19f070c109a38c286684256adc656c' +
			'000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' +
			'0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'0000000000000000000000000000000000000000000000000000000000000000' +
			'0000000000000000000000000000000000000000000000000000000000000000';

		const swapWithMissingProps: Swap = {
			...swapOne,
			swapAmount: undefined,
			limitReturnAmount: undefined,
			maxPrice: undefined,
		};
		const oneNestedSwapWithMissingProps = [[swapWithMissingProps]];

		const result = abiEncodeSwaps(oneNestedSwapWithMissingProps);

		expect(result).eq(expected);
	});
});
